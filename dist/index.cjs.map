{"version":3,"sources":["../src/enums/environments.ts","../src/enums/events.ts","../src/enums/themes.ts","../src/enums/urls.ts","../src/enums/variants.ts","../src/topper-web-sdk.ts"],"names":["Environments","Events","Themes","Urls","Variants","queryString","TOPPER_WEB_SDK_EVENT_SOURCE","TopperWebSdk","config","eventName","data","mainWindow","name","payload","handler","event","bootstrapToken","iframeElement","baseUrl","isTopperSelfEmbed","queryParams","url"],"mappings":"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","sourcesContent":["export enum Environments {\n  PRODUCTION = 'production',\n  SANDBOX = 'sandbox'\n}\n","export enum Events {\n  ALL = '*',\n  ORDER_PLACED = 'orderPlaced',\n  WIDGET_CONTINUE_BUTTON_CLICKED = 'widgetContinueButtonClicked'\n}\n","export enum Themes {\n  DARK = 'dark',\n  LIGHT = 'light'\n}\n","export enum Urls {\n  PRODUCTION = 'https://app.topperpay.com',\n  // SANDBOX = 'https://app.sandbox.topperpay.com',\n  SANDBOX = 'http://localhost:3000',\n  WEBSITE = 'https://www.topperpay.com/'\n}\n","export enum Variants {\n  IFRAME = 'iframe',\n  NEW_TAB = 'new-tab',\n  SAME_TAB = 'same-tab'\n}\n","import { Config } from './interfaces';\nimport { Environments, Events, Urls, Variants } from './enums';\nimport { EventHandler } from 'types';\nimport queryString from 'query-string';\n\nconst TOPPER_WEB_SDK_EVENT_SOURCE = '@topper-web-sdk';\n\nclass TopperWebSdk {\n  private eventHandlers: { [key in Events]?: EventHandler[] } = {};\n  private handleMessage: ((event: MessageEvent) => void) | null = null;\n  private isInitialized: boolean = false;\n  private targetWindow: Window | null = null;\n\n  public config: Config;\n\n  constructor(config: Config = {}) {\n    this.config = {\n      environment: Environments.PRODUCTION,\n      is_android_app: false,\n      is_ios_app: false,\n      variant: Variants.NEW_TAB,\n      ...config\n    };\n  }\n\n  static triggerEvent(eventName: Events, data?: any): void {\n    const mainWindow = window.self !== window.top ? window.parent : window.opener;\n\n    if (!mainWindow) {\n      return;\n    }\n\n    mainWindow.postMessage(\n      {\n        name: eventName,\n        payload: data,\n        source: TOPPER_WEB_SDK_EVENT_SOURCE\n      },\n      '*'\n    );\n  }\n\n  private triggerEvent(name: Events, payload?: any): void {\n    this.eventHandlers[Events.ALL]?.forEach(handler => handler({ data: payload, name }));\n\n    this.eventHandlers[name]?.forEach(handler => handler({ data: payload }));\n  }\n\n  private setConfig(config: Config): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  private initializeMessageListener(): void {\n    this.handleMessage = (event: MessageEvent) => {\n      const allowedOrigins = [Urls.PRODUCTION, Urls.SANDBOX];\n\n      if (!allowedOrigins.includes(event.origin as Urls) || event.source !== this.targetWindow) {\n        return;\n      }\n\n      if (event.data.name && event.data.source === TOPPER_WEB_SDK_EVENT_SOURCE) {\n        this.triggerEvent(event.data.name as Events, event.data.payload);\n      }\n    };\n\n    window.addEventListener('message', this.handleMessage);\n  }\n\n  dispose(): void {\n    window.removeEventListener('message', this.handleMessage as EventListener, false);\n    this.eventHandlers = {};\n  }\n\n  initialize({\n    bootstrapToken,\n    config = {},\n    iframeElement\n  }: {\n    bootstrapToken: string;\n    iframeElement?: HTMLIFrameElement;\n    config?: Config;\n  }): void {\n    if (this.isInitialized) {\n      throw new Error('This TopperWebSdk instance was already initialized.');\n    }\n\n    this.isInitialized = true;\n    this.setConfig(config);\n\n    const baseUrl = this.config.environment === Environments.SANDBOX ? Urls.SANDBOX : Urls.PRODUCTION;\n    const isTopperSelfEmbed = window.location.href.includes(Urls.WEBSITE);\n\n    const queryParams = {\n      bt: bootstrapToken,\n      ...(isTopperSelfEmbed && { embed: 1 }),\n      ...(this.config.theme && { theme: this.config.theme }),\n      ...(this.config.is_android_app && { is_android_app: 1 }),\n      ...(this.config.is_ios_app && { is_ios_app: 1 })\n    };\n\n    const url = queryString.stringifyUrl({ query: queryParams, url: `${baseUrl}/` });\n\n    if (this.config.variant === Variants.IFRAME) {\n      if (!iframeElement) {\n        throw new Error('iframeElement is required for iframe variant');\n      }\n\n      iframeElement.src = url;\n      this.targetWindow = iframeElement.contentWindow;\n    } else if (this.config.variant === Variants.NEW_TAB) {\n      this.targetWindow = window.open(url, '_blank');\n    } else if (this.config.variant === Variants.SAME_TAB) {\n      window.location.href = url;\n\n      return;\n    }\n\n    this.initializeMessageListener();\n  }\n\n  on(eventName: Events, handler: EventHandler): void {\n    if (!this.eventHandlers[eventName]) {\n      this.eventHandlers[eventName] = [];\n    }\n\n    this.eventHandlers[eventName]?.push(handler);\n  }\n}\n\nexport { TopperWebSdk };\n"]}